<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[活在你的时区]]></title>
    <url>%2F2018%2F12%2F06%2Farticle%2F%E6%B4%BB%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%97%B6%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[纽约时间比加州时间早三个小时，New York is 3 hours ahead of California但加州时间并没有变慢。but it does not make California slow有人22岁就毕业了，Someone graduated at the age of 22但等了五年才找到好的工作！but waited 5 years before securing a good job有人25岁就当上CEO，Someone became a CEO at 25却在50岁去世。and died at 50也有人迟到50岁才当上CEO，While another became a CEO at 50然后活到90岁。and lived to 90 years.有人依然单身，Someone is still single同时也有人已婚。while someone else got married.奥巴马55岁就退休，Obama retires at 55川普70岁才开始当总统。but Trump starts at 70世上每个人本来就有自己的发展时区。Absolutely everyone in this world works based on their Time Zone身边有些人看似走在你前面，People around you might seem to go ahead of you也有人看似走在你后面。some might seem to be behind you但其实每个人在自己的时区都有自己的步伐。But everyone is running their own RACE, in their own TIME.不用嫉妒或嘲笑他们。Don’t envy them or mock them他们都在自己的时区里，你也是！They are in their TIME ZONE, and you are in yours生命就是等待正确的行动时机。Life is about waiting for the right moment to act所以，放轻松、你没有落后、你没有领先。So, RELAX、You’re not LATE、You’re not EARLY在命运为你安排的属于自己的时区里，一切都准时。You are very much ON TIME, and in your TIME ZONE Destiny set up for you. 文章来源作者：HIGO链接：https://www.zhihu.com/question/38874036/answer/458029368来源：知乎END🙈]]></content>
      <tags>
        <tag>原创</tag>
        <tag>文章推荐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo常用指令]]></title>
    <url>%2F2018%2F12%2F06%2Fhexo%2Fhexo-order%2F</url>
    <content type="text"><![CDATA[一、Hexo安装及初始化123npm install hexo-cli -g #安装npm update hexo -g #升级hexo init #初始化 二、常用指令 新建草稿 1hexo new draft "文章名称" 新建文章 1hexo n "文章名称" === hexo new "文章名称" 发布文章 1hexo publish "文章名称" 启动服务 1hexo s === hexo server 部署至服务器 1hexo d === hexo deploy 清除缓存 1hexo clean 更改端口 1hexo server -p 端口号 自定义IP 1hexo s -i ip地址 生成静态页面至public目录 1hexo g === hexo generate Ps:可与hexo g 合并为 hexo d -g / hexo g -d 三、插件推荐 1 文章置顶12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 文章添加top值即可 2 文章封面1npm install --save hexo-less 一张图片外链和less标签即可,该封面图不会出现在正文效果图如下 四、报错异常 1 找不到git部署及解决方法12ERROR Deployer not found: gitnpm install hexo-deployer-git --save 2 部署类型设置git –&gt;打开你博客的根目录，找到 _config.yml配置文件123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:github用户名/github用户名.github.io branch: master 五、查看更多详情 Hexo官方文档 https://hexo.io/zh-cn/ 大佬们的教程 https://segmentfault.com/a/1190000002632530 https://www.cnblogs.com/fengxiongZz/p/7707219.html https://www.bilibili.com/video/av17653359 END🙈]]></content>
      <tags>
        <tag>原创 - 学习笔记 - Hexo指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis学习笔记(一)]]></title>
    <url>%2F2018%2F12%2F05%2Fmybatis%2Fmybatis1%2F</url>
    <content type="text"><![CDATA[MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。是一个基于Java的持久层框架。 一、理解Mybatis? MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。 MyBatis 避免了几乎所有的 JDBC 代码和手工设置参数以及抽取结果集。 MyBatis 使用简单的 XML 或注解来配置和映射基本体，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。 二、与Hibernate对比 MyBatis与Hibernate都属于ORM框架，为数据层提供持久化操作的支持。 由于MyBatis等接近于JDBC的开发，所以相对于Hibernate更加的简单易学。 Hibernate开发者不要关注SQL的生成和结果的映射，而Mybatis需要手动配置关系和SQL。 Hibernate与具体的数据库关联配置对应的XML即可，所执行的HQL语句与数据库无关，移植性强。而Mybatis直接使用的是SQL语句，相对没那么灵活。 Mybatis的灵活性、执行效率略高于Hibernate。 三、Mybatis的优缺点 优点： SQL写在XML里，从程序代码中彻底分离，降低耦合度，便于统一管理和优 化，并可重用，适合多表的复杂查询 提供XML标签，支持编写动态SQL语句。 提供映射标签，支持对象与数据库的ORM字段关系映射。 缺点 SQL语句的编写工作量较大，尤其是字段多、关联表多时，更是如此，对开发人员编写SQL语句的功底有一定要求。 SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。 四、代码案例1、编写Mybatis核心配置文件【 mybatis-core.xml 】12345678910111213141516171819&lt;configuration&gt; &lt;typeAliases&gt; &lt;typeAlias type="com.fan.entity.StudentEntity" alias="StudentEntity"/&gt; &lt;/typeAliases&gt; &lt;environments default="development"&gt; &lt;environment id="development"&gt; &lt;transactionManager type="JDBC"/&gt; &lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt; &lt;property name="url" value="jdbc:mysql://127.0.0.1:3306/public"/&gt; &lt;property name="username" value="root"/&gt; &lt;property name="password" value="root"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource="xxx.xml"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 释意: typeAlias用于存放实体类别名的集合 — typeAlias中的type代表实体类 — alias我们自己自定义的别名 environments环境 default里面的值可以是生产环境、测试环境、开发环境… transactionManager事务管理 type默认为JDBC dataSource是数据库连接的基本信息 mapper中的resource代表应用实体类的Mapper 2、编写Mybatis核心配置文件【 mybatis-core.xml 】123456789101112131415161718192021&lt;mapper namespace="StuMapper"&gt; &lt;select id="selCount" resultType="int"&gt; select count(*) from student &lt;/select&gt; &lt;select id="selById" parameterType="int" resultType="StudentEntity"&gt; SELECT * FROM student WHERE student.stuId = #&#123;id&#125; &lt;/select&gt; &lt;insert id="addOne" parameterType="StudentEntity"&gt; INSERT INTO student VALUES(NULL,#&#123;stuName&#125;,#&#123;gender&#125;,#&#123;age&#125;,#&#123;address&#125;,NULL) &lt;/insert&gt; &lt;delete id="delOne" parameterType="int"&gt; DELETE FROM student WHERE student.stuId = #&#123;id&#125; &lt;/delete&gt; &lt;update id="modifyOne" parameterType="StudentEntity"&gt; UPDATE student SET stuName = #&#123;stuName&#125; WHERE stuId = #&#123;stuId&#125; &lt;/update&gt;&lt;/mapper&gt; 释意: mapper中的namespace是独立唯一的 DML语句中支持写原生的SQL语句 id可以形象的理解为方法名，但是同时也是独立唯一的 parameterType代表传过来的参数类型 resultType代表返回值 #{xxx} 可以理解为占位符 3、简单的使用123456789101112131415161718192021222324252627282930313233public class Main &#123; public static void main(String[] args) &#123; Reader reader = null; SqlSessionFactoryBuilder builder = null; SqlSessionFactory factory = null; SqlSession session = null; try &#123; //1.加载配置文件 reader = Resources.getResourceAsReader("mybatis-core.xml"); //2.得到工厂的创建对象 builder = new SqlSessionFactoryBuilder(); //3.得到工厂对象 factory = builder.build(reader); //4.得到session session = factory.openSession(); //5.执行语句 StudentEntity student = session.selectOne("StuMapper.selById", 100); //StuMapper--&gt; StudentMapper.xml中的namespace。 selById--&gt; 为其中的id 。 100--&gt; 实参 System.out.println("学生名为--&gt;" + student.getStuName()); session.commit(); //修改、新增语句记得提交事务 &#125; catch (Exception e) &#123; session.rollback(); e.printStackTrace(); &#125; finally &#123; if (session != null) &#123; session.close(); &#125; &#125; &#125;&#125; END🙈]]></content>
      <tags>
        <tag>原创</tag>
        <tag>后端</tag>
        <tag>学习笔记</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
</search>
