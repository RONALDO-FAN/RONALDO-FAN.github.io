<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Mybatis学习笔记(一)]]></title>
    <url>%2F2018%2F12%2F05%2Fmybatis%2Fmybatis1%2F</url>
    <content type="text"><![CDATA[MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。是一个基于Java的持久层框架。 一、理解Mybatis? MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。 MyBatis 避免了几乎所有的 JDBC 代码和手工设置参数以及抽取结果集。 MyBatis 使用简单的 XML 或注解来配置和映射基本体，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。 二、与Hibernate对比 MyBatis与Hibernate都属于ORM框架，为数据层提供持久化操作的支持。 由于MyBatis等接近于JDBC的开发，所以相对于Hibernate更加的简单易学。 Hibernate开发者不要关注SQL的生成和结果的映射，而Mybatis需要手动配置关系和SQL。 Hibernate与具体的数据库关联配置对应的XML即可，所执行的HQL语句与数据库无关，移植性强。而Mybatis直接使用的是SQL语句，相对没那么灵活。 Mybatis的灵活性、执行效率略高于Hibernate。 三、Mybatis的优缺点 优点： SQL写在XML里，从程序代码中彻底分离，降低耦合度，便于统一管理和优 化，并可重用，适合多表的复杂查询 提供XML标签，支持编写动态SQL语句。 提供映射标签，支持对象与数据库的ORM字段关系映射。 缺点 SQL语句的编写工作量较大，尤其是字段多、关联表多时，更是如此，对开发人员编写SQL语句的功底有一定要求。 SQL语句依赖于数据库，导致数据库移植性差，不能随意更换数据库。 四、代码案例1、编写Mybatis核心配置文件【 mybatis-core.xml 】1234567891011121314151617&lt;typeAliases&gt; &lt;typeAlias type=&quot;com.fan.entity.StudentEntity&quot; alias=&quot;StudentEntity&quot;/&gt;&lt;/typeAliases&gt; &lt;environments default=&quot;development&quot;&gt; &lt;environment id=&quot;development&quot;&gt; &lt;transactionManager type=&quot;JDBC&quot;/&gt; &lt;dataSource type=&quot;POOLED&quot;&gt; &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt; &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://127.0.0.1:3306/public&quot;/&gt; &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt; &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource=&quot;StudentMapper.xml&quot;/&gt; &lt;/mappers&gt; 释意: typeAlias用于存放实体类别名的集合 — typeAlias中的type代表实体类 — alias我们自己自定义的别名 environments环境 default里面的值可以是生产环境、测试环境、开发环境… transactionManager事务管理 type默认为JDBC dataSource是数据库连接的基本信息 mapper中的resource代表应用实体类的Mapper 2、编写Mybatis核心配置文件【 mybatis-core.xml 】123456789101112131415161718192021&lt;mapper namespace=&quot;StuMapper&quot;&gt; &lt;select id=&quot;selCount&quot; resultType=&quot;int&quot;&gt; select count(*) from student &lt;/select&gt; &lt;select id=&quot;selById&quot; parameterType=&quot;int&quot; resultType=&quot;StudentEntity&quot;&gt; SELECT * FROM student WHERE student.stuId = #&#123;id&#125; &lt;/select&gt; &lt;insert id=&quot;addOne&quot; parameterType=&quot;StudentEntity&quot;&gt; INSERT INTO student VALUES(NULL,#&#123;stuName&#125;,#&#123;gender&#125;,#&#123;age&#125;,#&#123;address&#125;,NULL) &lt;/insert&gt; &lt;delete id=&quot;delOne&quot; parameterType=&quot;int&quot;&gt; DELETE FROM student WHERE student.stuId = #&#123;id&#125; &lt;/delete&gt; &lt;update id=&quot;modifyOne&quot; parameterType=&quot;StudentEntity&quot;&gt; UPDATE student SET stuName = #&#123;stuName&#125; WHERE stuId = #&#123;stuId&#125; &lt;/update&gt;&lt;/mapper&gt; 释意: mapper中的namespace是独立唯一的 DML语句中支持写原生的SQL语句 id可以形象的理解为方法名，但是同时也是独立唯一的 parameterType代表传过来的参数类型 resultType代表返回值 #{xxx} 可以理解为占位符 3、简单的使用123456789101112131415161718192021222324252627282930313233public class Main &#123; public static void main(String[] args) &#123; Reader reader = null; SqlSessionFactoryBuilder builder = null; SqlSessionFactory factory = null; SqlSession session = null; try &#123; //1.加载配置文件 reader = Resources.getResourceAsReader(&quot;mybatis-core.xml&quot;); //2.得到工厂的创建对象 builder = new SqlSessionFactoryBuilder(); //3.得到工厂对象 factory = builder.build(reader); //4.得到session session = factory.openSession(); //5.执行语句 StudentEntity student = session.selectOne(&quot;StuMapper.selById&quot;, 100); //StuMapper--&gt; StudentMapper.xml中的namespace。 selById--&gt; 为其中的id 。 100--&gt; 实参 System.out.println(&quot;学生名为--&gt;&quot; + student.getStuName()); session.commit(); //修改、新增语句记得提交事务 &#125; catch (Exception e) &#123; session.rollback(); e.printStackTrace(); &#125; finally &#123; if (session != null) &#123; session.close(); &#125; &#125; &#125;&#125; END🙈]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
</search>
