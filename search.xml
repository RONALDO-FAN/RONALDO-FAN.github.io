<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Java 集合框架简述]]></title>
    <url>%2F2018%2F12%2F09%2Fjava%2F%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[一、起步集合类都位于java.util包下，Java 集合框架主要包括两种类型的容器，一种是集合（Collection）,存储一个元素集合;另一种是图（Map）,存储键/值对映射。支持序列化 二、Collection接口1public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; &#123;&#125; 查看源码发现Collection是一个接口类，其继承了java迭代接口Iterable 有三个主要的子接口List、Set 和 Queue，记住Map不是Collection的子接口!! 存储特点允许重复的对象 常用的方法 三、List接口1public interface List&lt;E&gt; extends Collection&lt;E&gt; &#123;&#125; 查看源码发现List是一个接口类，其继承了Collection接口，它可以定义一个允许重复的有序集合 List集合代表一个有序集合，集合中每个元素都有其对应的顺序索引 List集合允许使用重复元素，可以通过索引来访问指定位置的集合元素 实现List接口的集合主要有： (1) ArrayList 1public class ArrayList&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, Serializable&#123;&#125; ArrayList继承于AbstractList，实现了List、RandomAccess、Cloneable、Serializable接口 ArrayList是一个动态数组，也是我们最常用的集合 它允许任何符合规则的元素插入甚至包括null 每一个ArrayList都有一个初始容量（10），该容量代表了数组的大小，但是数组大小是动态的 总的特点:基于数组实现，非线程安全，便于索引，查询效率高，但不便于插入和删除 (2) LinkedList 1public class LinkedList&lt;E&gt; extends AbstractSequentialList&lt;E&gt; implements List&lt;E&gt;, Deque&lt;E&gt;, Cloneable, Serializable&#123;&#125; LinkedList继承于AbstractSequentialList，实现了List，Deque，Cloneable，Serializable接口 LinkedList是一个双向链表，那么它的顺序访问会非常高效，而随机访问效率比较低 它除了有ArrayList的基本操作方法外还额外提供了get，remove，insert方法在LinkedList的首部或尾部进行操作 有个重要的内部类Entry是双向链表节点所对应的数据结构，它包括的属性有：当前节点所包含的值，上一个节点，下一个节点。 总的特点:基于链表实现，链表内存是散乱的，每一个元素本身内存地址的同时还存储下一个的地址，链表增删快，查找慢 (3) Vector 1public class Vector&lt;E&gt; extends AbstractList&lt;E&gt; implements List&lt;E&gt;, RandomAccess, Cloneable, Serializable&#123;&#125; Vector继承于AbstractList，实现了List，RandomAccess，Cloneable，Serializable接口 与ArrayList相似，但是Vector是同步的 Vector是线程安全的动态数组 总的特点:基于数组实现，线程安全的，效率低 四、Map接口1public interface Map&lt;K,V&gt; &#123;&#125; 查看源码发现Map是一个接口类，但是它不继承或者实现任何类或接口 Map与List、Set接口不同，它是由一系列键值对组成的集合 提供了key到Value的映射 Map中它保证了key与value之间的一一对应关系 它不能存在相同的key值，而value值可以相同 实现Map接口的集合主要有： (1) HashMap 1public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt;, Cloneable, Serializable &#123;&#125; HashMap继承于AbstractMap，实现了Map，Cloneable，Serializable接口 HashMap 是一个散列表，它存储的内容是键值对(key-value)映射 HashMap 的实现不是同步的，这意味着它不是线程安全的 HashMap中的映射不是有序的 总的特点:基于hash表的Map接口实现，非线程安全的，效率高，key、value都可以为null (2) HashTable 1public class Hashtable&lt;K,V&gt; extends Dictionary&lt;K,V&gt; implements Map&lt;K,V&gt;, Cloneable, Serializable &#123;&#125; HashTable继承于Dictionary，实现了Map，Cloneable，Serializable接口 HashTable 是一个散列表，它存储的内容是键值对(key-value)映射 HashTable的实现是同步的，这意味着它是线程安全的 HashTable中的映射不是有序的 总的特点:基于hash表的Map接口实现，线程安全的，效率低，key、value都不可以为null (3) LinkedHashMap 1public class LinkedHashMap&lt;K,V&gt; extends HashMap&lt;K,V&gt; implements Map&lt;K,V&gt; &#123;&#125; LinkedHashMap继承于HashMap，实现了 Map接口 LinkedHashMap是一个HashMap的子类，它保留插入的顺序 如果需要输出的顺序和输入时的相同，那么就选用LinkedHashMap LinkedHashMap是Map接口哈希表和链接列的实现，具有可预知的迭代顺序 总的特点:基于HashMap，保存了记录的插入顺序，非线程安全的，key、value都可以为null 五、Set接口1public interface Set&lt;E&gt; extends Collection&lt;E&gt; &#123;&#125; 查看源码发现Set是一个接口类，其继承了Collection接口 Set中的元素实现了不重复，有点象集合的概念 由于Set接口的特殊性，所有传入Set集合中的元素都必须不同 最多允许有一个null元素对象 无序，不允许有重复的元素 虽然Set中元素没有顺序，但是元素在set中的位置是有由该元素的HashCode决定的，其具体位置其实是固定的 实现Set接口的集合主要有： (1) HashSet 1public class HashSet&lt;E&gt; extends AbstractSet&lt;E&gt; implements Set&lt;E&gt;, Cloneable, Serializable&#123;&#125; HashSet继承于AbstractSet，实现了Set，Cloneable，Serializable接口 HashSet是一个没有重复元素的集合，它是由HashMap实现的，不保证元素的顺序 HashSet允许使用null元素，但是非同步的 HashSet按Hash算法来存储集合的元素，因此具有很好的存取和查找性能 HashSet的实现方式大致如下，通过一个HashMap存储元素，元素是存放在HashMap的Key中，而Value统一使用一个Object对象 总的特点:基于HashMap，不允许集合中有重复的值，使用该方式时需要重写equals()和hashCode()方法 (2) LinkedHashSet 1public class LinkedHashSet&lt;E&gt; extends HashSet&lt;E&gt; implements Set&lt;E&gt;, Cloneable, Serializable &#123;&#125; LinkedHashSet继承于HashSet，实现了Set，Cloneable，Serializable接口 LinkedHashSet底层是基于LinkedHashMap来实现的，有序非同步 LinkedHashSet集合是根据元素的hashCode值来决定元素的存储位置，但是它同时使用链表维护元素的次序 LinkedHashSet将会以元素的添加顺序访问集合的元素 总的特点:基于HashMap，不允许集合中有重复的值，保存了记录的插入顺序 (2) TreeSet 1public class TreeSet&lt;E&gt; extends AbstractSet&lt;E&gt; implements NavigableSet&lt;E&gt;, Cloneable, Serializable &#123;&#125; TreeSet继承于AbstractSet，实现了NavigableSet，Cloneable，Serializable接口 TreeSet是一个有序集合 TreeSet可以确保集合元素处于排序状态 TreeSet支持两种排序方式，自然排序和定制排序 TreeSet通过compare或者comparaeTo函数来判断元素是否相等 总的特点:基于TreeMap，非线程安全，非同步的 END🙈]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用Hexo-Github域名绑定(阿里云)]]></title>
    <url>%2F2018%2F12%2F09%2Fhexo%2Fhexo%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%2F</url>
    <content type="text"><![CDATA[一、起步 Node.js Git Hexo GitHub环境已搭建 域名已经实名认证 二、开始 得到GitHub仓库名[ 如crbug.github.io ]的IP值我的是 185.199.111.153 域名解析 打开阿里云域名控制台点击解析后点击新手引导，填入我们之前CMD命令ping好的值–&gt;如185.199.111.153会给我们生成两条A记录值修改第一条A值为CNAME值(CNAME记录的记录值为域名形式（如abc.example.com）)，其值填写自己GitHub仓库名即可 三、修改GitHub仓库 进入自己Hexo的仓库，点击设置 往下滑找到当前页面GitHub Pages项中的Custom domain，修改值为自己的域名 四、修改本地Hexo 进入Hexo项目下的source文件夹，创建一个文件命名为CNAME，里面填写自己需要绑定的阿里云域名，等待10分钟左右即可之后就可以通过我们自己的域名正常访问博客了END🙈]]></content>
      <tags>
        <tag>原创</tag>
        <tag>Hexo指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[上帝偏爱奔跑者]]></title>
    <url>%2F2018%2F12%2F08%2Farticle%2F%E4%B8%8A%E5%B8%9D%E5%81%8F%E7%88%B1%E5%A5%94%E8%B7%91%E8%80%85%2F</url>
    <content type="text"><![CDATA[&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;2013年，英超豪门阿森纳足球俱乐部的官方网站发布了一部短片，纪念一位越南的“Running Man”（奔跑者）。片头是：每一个故事里都有一个英雄，在这一次的旅途中，英雄出现了——The Running Man。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;短片一经发布，这位越南球迷即刻风靡全球。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;发布前一天，阿森纳队刚刚抵达越南。作为一支英超球队，此番访问越南尚属首次。因此，他们一到，立即引起了轰动。一群狂热的球迷一路奔跑，追赶着偶像乘坐的大巴车。可是，路途很长，车速也不慢。许多人在追赶一段后便放弃了。可是，有一个小伙子却一直坚持着。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;小伙子20岁上下，肤色黝黑，笑容爽朗。尽管大巴车一直以较快的速度前行，可是，他奔跑的速度也不慢，总能适时跟上。小伙子不断地朝车内的群星微笑，向他们挥手，向他们竖起大拇指。车内，球星们也不断回应，露出善意的笑容。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;大步奔跑，不断挥手示意，始终不渝地微笑着。这样的奔跑画面感染了每一位阿森纳球员。他们不断地朝他挥手、微笑、呐喊。车有多快，奔跑便有多快。那是一条长长的道路，途经闹市、街道、人群……一边望向车内，一边急速奔跑，他免不了摔跤。是的，他因一根灯柱而摔倒过，他因一棵大树而撞着了头……每一次，当他摔倒的时候，球星们便发出遗憾之叹。可是随即，他们又欢呼起来：这位了不起的小伙子迅速从地上爬起，仍然保持着那爽朗的笑容，向他们挥手，跟着他们继续前行。他不曾停歇。他只知道，他要一直追赶他们。就如夸父一样，这是一个奔向太阳的史诗般的“英雄”。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;目睹这位充满激情的小伙子奔跑、跌倒、爬起、微笑、再奔跑的过程，球星们对他肃然起敬。所有的球员都跑向车厢那一侧，对他唱了起来：“Sign him up（签下他）！Sign him up……”当然，这是玩笑话，但是，这位球迷身上的热情与激情深深打动了他们。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;他跑了足足5公里。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;他终于乏了。不过，他没有停下，而是换乘一辆摩托车，继续他的“追梦”之路。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;看着他如此不懈地追逐，带队教练终于发话，停下车，为他开启了一扇通向梦想的大门——他有了与阿森纳球员零距离接触的机会。见自己的奔跑没有白费，他振臂欢呼。与他一齐欢呼的，还有车上所有的队员和教练。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;车内，所有的球星一一起立，迎接这位他们刚刚“签下”的新成员。小伙子与他们握手、拥抱、合影，求取签名。他与阿尔特塔并肩而坐，一只手友好地搭在这位著名球星的肩上，另一只手则振臂高呼。这样的一张照片成了阿森纳与球迷合影的经典之照。前锋吉鲁把这一过程完整地拍了下来。当他把视频放上Facebook时，全世界的人都惊叹了。有网友评论：“惊人的耐力、体力和忠诚度！难道他就是温格传说中的7000万引援？签了他！”&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;这是幽默而善意的评论，还有很多人为他喝彩。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;可是，更令人意外的是，2013年7月17日，当阿森纳队与越南队一同出现在绿茵球场时，这位“奔跑者”居然获得了与阿森纳球星一同出场的机会，成为阿森纳“名副其实”的“首发”球员。站在球场上，他与波多尔斯基谈笑风生。他参加双方球员例行的握手仪式。赛后，他还获得了温格赠送的机票、球票和酒店住宿待遇。于是，在将来的某一天，这位幸运的“奔跑者”将前往伦敦，去观看足球比赛。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;对于一位追梦的人来说，这也是他获得的最高礼遇。这位红透全世界的越南小伙子，在忘我的奔跑中追寻到了他的梦想。这不仅仅是一个球迷对于球星的向往和追求，更是关于青春、关于“梦”的追求。就在那样疯狂的奔跑中，他实现了原本遥不可及的梦想。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;所有的球迷在为他高兴的同时，也在艳羡他的境遇。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;然而，并不是所有人都那么“幸运”。因为，世界上分为两种人：一种是奔跑者，一种是观望者。&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;&#8194;而上帝，往往偏爱那些拼尽全力的疯狂的奔跑者。 文章来源链接：http://www.ledu365.com/a/lizhi/49888.html来源：乐读网END🙈]]></content>
      <tags>
        <tag>转载</tag>
        <tag>文章推荐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis学习笔记(二)]]></title>
    <url>%2F2018%2F12%2F07%2Fmybatis%2Fmybatis2%2F</url>
    <content type="text"><![CDATA[一、MybatisUtil工具类MybatisUtil工具类主要是为了简化开发、提升开发速率。在没整合Spring之前方便统一管理Session等好处。以下两个版本的代码所执行的结果一致，完整版考虑的周到代码健壮性更好，两版本没本质区别！ 完整版 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647public class MybatisUtil &#123; private static final String CONFIGFILE = "mybatis-core.xml"; //当前线程存在session中 private static final ThreadLocal&lt;SqlSession&gt; THREAD_LOCAL = new InheritableThreadLocal&lt;&gt;(); private static Reader reader = null; private static SqlSessionFactoryBuilder builder = null; private static SqlSessionFactory factory = null; //用静态代码块进行初始化 static &#123; try &#123; //加载配置文件 reader = Resources.getResourceAsReader(CONFIGFILE); //得到工厂创建对象 builder = new SqlSessionFactoryBuilder(); //得到工厂对象 factory = builder.build(reader); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; //获得工厂对象 public static SqlSessionFactory getFactory() &#123; if (factory == null) &#123; factory = builder.build(reader); &#125; return factory; &#125; //得到session public static SqlSession getSession() &#123; SqlSession session = THREAD_LOCAL.get(); if (session == null) &#123; SqlSessionFactory factory = getFactory(); session = factory.openSession(); THREAD_LOCAL.set(session); &#125; return session; &#125; //关闭session public static void colseSession() &#123; SqlSession session = THREAD_LOCAL.get(); if (session != null) &#123; session.close(); &#125; THREAD_LOCAL.set(null); &#125;&#125; 简化版 1234567891011121314151617181920public class MybatisUtil &#123; private static SqlSessionFactory factory; static &#123; try &#123; factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream("mybatis-core.xml")); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; public static SqlSession getSession() &#123; return factory.openSession(false); //true 为自动提交事务 &#125; public static void closeSession(SqlSession sqlSession) &#123; if (null != sqlSession) &#123; sqlSession.close(); &#125; &#125;&#125; 二、自增、模糊查询及Map传参 设置主键自动增长 123&lt;insert id="saveOne" parameterType="StudentEntity" useGeneratedKeys="true" keyProperty="stuId"&gt; INSERT INTO student VALUES(NULL,#&#123;stuName&#125;,#&#123;gender&#125;,#&#123;age&#125;,#&#123;address&#125;,NULL)&lt;/insert&gt; 释意: useGeneratedKeys表示是否使用JDBC的getGenereatedKeys方法获取主键，并赋值到keyProperty设置的属性中 keyProperty需要自动增长的主键名称 模糊查询 123&lt;select id="queryByVague" parameterType="String" resultType="StudentEntity"&gt; SELECT * FROM student WHERE student.stuName like concat('%',#&#123;stuName&#125;,'%')&lt;/select&gt; 释意: MySQL中concat函数，返回结果为连接参数产生的字符串。如有任何一个参数为NULL ，则返回值为 NULL 使用Map集合传参 123&lt;select id="queryByFactor" parameterType="map" resultType="StudentEntity"&gt; SELECT * FROM student WHERE student.gender = #&#123;gender&#125; AND student.age &gt; #&#123;minAge&#125;&lt;/select&gt; 释意: 调用时注意map集合里面的键一定要与传参命名一致 1234Map parame = new HashMap();parame.put("gender", "男");parame.put("minAge", 30);List&lt;StudentEntity&gt; list = session.selectList("StuMapper.selMap", parame); 别名与Java类型映射表(常用类型) 别名 映射的类型 boolean Boolean string String double Double int Intrger intrger Intrger list List arraylist ArrayList map Map hashMap HashMap 三、当实体类的属性和数据库中表的列名不一致 需要在映射文件中重新绑定属性与列名 123&lt;resultMap id="diyMapping" type="StudentEntity" autoMapping="true"&gt; &lt;result property="sex" column="gender"/&gt;&lt;/resultMap&gt; 释意: id代表这个resultMap的唯一标识 type代表需要重新映射的实体类也可以是之前设置的别名 autoMapping=”true” 表示自动映射列名和属性名相同的属性，不相同的就要单独做映射。 当我们要重新查询的时候可以这样，下面语句中的resultMap填写上面的ID即可123&lt;select id="queryCount" resultMap="diyMapping"&gt; select count(*) from student&lt;/select&gt; END🙈]]></content>
      <tags>
        <tag>原创</tag>
        <tag>后端</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Pjax]]></title>
    <url>%2F2018%2F12%2F06%2Fjquery%2Fpjax%2F</url>
    <content type="text"><![CDATA[Pjax是一个jQuery插件，它通过ajax和pushState技术提供了极速的（无刷新ajax加载）浏览体验，并且保持了真实的地址、网页标题，浏览器的后退（前进）按钮也可以正常使用。 一、我眼中的PjaxPjax === PushState(修改地址栏的Url) + Ajax(异步无刷新技术)。简单的来说pjax是这两个技术的结合，执行原理ajax负责去后端请求部分html片段或者json数据，通过渲染到指定的div容器中，再由pushstate刷新当前的url地址，但是并不会造成页面的闪动，因此提升用户网页浏览体验。 二、Pjax的工作原理pjax的工作原理是通过ajax从服务器端获取HTML，在页面中用获取到的HTML替换指定容器元素中的内容。然后使用pushState技术更新浏览器地址栏中的当前地址。 三、Pjax的优缺点 优点： 不存在页面资源（js/css）的重复加载和应用。 如果服务器端配置了pjax，它可以只渲染页面局部内容，从而避免服务器渲染完整布局的额外开销。 缺点 不支持一些低版本的浏览器(如IE系列)，因为pushState是html5中history的新特性，在某些旧版浏览器中可能不支持。 使服务端处理变得复杂。 pjax依赖于jQuery 1.8或者更高版本。 四、Pjax起步 通过npm安装 or 通过js引入(首先得引入jqeury)12$ npm install jquery-pjaxhttps://raw.github.com/defunkt/jquery-pjax/master/jquery.pjax.js 五、Pjax方法 $.fn.pjax 概述 1$(document).pjax(selector, [container], options) 1.selector：string类型，用于click 事件委托 的选择器。 2.container：string类型，用于标识唯一pjax容器的选择器。 3.options object类型，包含下列选项。 选项 默认值 说明 timeout 650 ajax超时时间（毫秒），超时后强制刷新整个页面 push true 使用 pushState 在浏览器中添加历史记录 replace false 替换URL地址但不添加浏览器历史记录 type “GET” 请求类型 dataType “html” 服务器端返回的数据类型 type “GET” 请求类型 url link.href string或function，返回ajax请求响应的URL 全局使用$.pjax.defaults对象改变默认配置，如下 $.pjax.defaults.timeout = 1200 $.fn.pjax 用法 最简单常见的pjax使用方法如下： 1$(document).pjax('a', '#pjax-container') pjax()方法能若干个参数，上文涉及到的’a’和’#pjax-container’。’a’代表所有的a标签链接，而’#pjax-container’代表需要替换内容的容器。通过这种方式可以让页面中所有的链接都实现pjax加载，并指定ID为pjax-container的作为容器元素。 如果我们想指定a标签作为pjax链接使用方法如下： 1$(document).pjax('[data-pjax] a, a[data-pjax]', '#pjax-container') 那么我们可以用data-pjax来注明这是一个pjax链接，然后使用a[data-pjax]来代替全局选择器a。 六、事件 $.pjax.click 点击事件 本示例使用当前的click上下文来设置一个祖先元素作为容器：1234567if ($.support.pjax) &#123; $(document).on('click', 'a[data-pjax]', function(event) &#123; var container = $(this).closest('[data-pjax-container]') var containerSelector = '#' + container.id $.pjax.click(event, &#123;container: containerSelector&#125;) &#125;)&#125; $.pjax.submit 表单提交事件 通过pjax提交表单123$(document).on('submit', 'form[data-pjax]', function(event) &#123; $.pjax.submit(event, '#pjax-container')&#125;) $.pjax.reload 重载事件 使用pjax机制发起一个当前URL的请求到服务器，并且通过响应的内容替换容器元素中的内容，同时不添加浏览器历史记录。1$.pjax.reload('#pjax-container', options) $.pjax 手动调用pjax事件 主要用于非click事件发起pjax请求的情况。如果可以获得click事件，请使用$.pjax.click(event)来代替。1234function applyFilters() &#123; var url = urlForFilters() $.pjax(&#123;url: url, container: '#pjax-container'&#125;)&#125; 七、文档链接：https://github.com/defunkt/jquery-pjax来源：github链接：http://bsify.admui.com/jquery-pjax/来源：bsifyEND🙈]]></content>
      <tags>
        <tag>转载</tag>
        <tag>前端</tag>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[活在你的时区]]></title>
    <url>%2F2018%2F12%2F06%2Farticle%2F%E6%B4%BB%E5%9C%A8%E4%BD%A0%E7%9A%84%E6%97%B6%E5%8C%BA%2F</url>
    <content type="text"><![CDATA[纽约时间比加州时间早三个小时，New York is 3 hours ahead of California但加州时间并没有变慢。but it does not make California slow有人22岁就毕业了，Someone graduated at the age of 22但等了五年才找到好的工作！but waited 5 years before securing a good job有人25岁就当上CEO，却在50岁去世。Someone became a CEO at 25，and died at 50也有人迟到50岁才当上CEO，然后活到90岁。While another became a CEO at 50 and lived to 90 years.有人依然单身，同时也有人已婚。Someone is still single，while someone else got married.奥巴马55岁就退休，川普70岁才开始当总统。Obama retires at 55，but Trump starts at 70世上每个人本来就有自己的发展时区。Absolutely everyone in this world works based on their Time Zone身边有些人看似走在你前面，People around you might seem to go ahead of you也有人看似走在你后面。some might seem to be behind you但其实每个人在自己的时区都有自己的步伐。But everyone is running their own RACE, in their own TIME.不用嫉妒或嘲笑他们。Don’t envy them or mock them他们都在自己的时区里，你也是！They are in their TIME ZONE, and you are in yours生命就是等待正确的行动时机。Life is about waiting for the right moment to act所以，放轻松、你没有落后、你没有领先。So, RELAX、You’re not LATE、You’re not EARLY在命运为你安排的属于自己的时区里，一切都准时。You are very much ON TIME, and in your TIME ZONE Destiny set up for you. 文章来源作者：HIGO链接：https://www.zhihu.com/question/38874036/answer/458029368来源：知乎END🙈]]></content>
      <tags>
        <tag>转载</tag>
        <tag>文章推荐</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo常用指令]]></title>
    <url>%2F2018%2F12%2F06%2Fhexo%2Fhexo-order%2F</url>
    <content type="text"><![CDATA[一、Hexo安装及初始化123npm install hexo-cli -g #安装npm update hexo -g #升级hexo init #初始化 二、常用指令 新建草稿 1hexo new draft "文章名称" 新建文章 1hexo n "文章名称" === hexo new "文章名称" 发布文章 1hexo publish "文章名称" 启动服务 1hexo s === hexo server 部署至服务器 1hexo d === hexo deploy 清除缓存 1hexo clean 更改端口 1hexo server -p 端口号 自定义IP 1hexo s -i ip地址 生成静态页面至public目录 1hexo g === hexo generate Ps:可与hexo g 合并为 hexo d -g / hexo g -d 三、插件推荐 1 文章置顶12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 文章添加top值即可 2 文章封面1npm install --save hexo-less 一张图片外链和less标签即可,该封面图不会出现在正文效果图如下 四、报错异常 1 找不到git部署及解决方法12ERROR Deployer not found: gitnpm install hexo-deployer-git --save 2 部署类型设置git –&gt;打开你博客的根目录，找到 _config.yml配置文件123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repository: git@github.com:github用户名/github用户名.github.io branch: master 五、查看更多详情 Hexo官方文档 https://hexo.io/zh-cn/ 大佬们的教程 https://segmentfault.com/a/1190000002632530 https://www.cnblogs.com/fengxiongZz/p/7707219.html https://www.bilibili.com/video/av17653359 END🙈]]></content>
      <tags>
        <tag>原创</tag>
        <tag>Hexo指令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mybatis学习笔记(一)]]></title>
    <url>%2F2018%2F12%2F05%2Fmybatis%2Fmybatis1%2F</url>
    <content type="text"><![CDATA[MyBatis 本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis 。2013年11月迁移到Github。是一个基于Java的持久层框架。 一、了解Mybatis MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架。 MyBatis 避免了几乎所有的 JDBC 代码和手工设置参数以及抽取结果集。 MyBatis 使用简单的 XML 或注解来配置和映射基本体，将接口和 Java 的 POJOs(Plain Old Java Objects,普通的 Java对象)映射成数据库中的记录。 二、与Hibernate对比 MyBatis与Hibernate都属于ORM框架，为数据层提供持久化操作的支持。 由于MyBatis等接近于JDBC的开发，所以相对于Hibernate更加的简单易学。 Hibernate开发者不要关注SQL的生成和结果的映射，而Mybatis需要手动配置关系和SQL。 Hibernate与具体的数据库关联配置对应的XML即可，所执行的HQL语句与数据库无关，移植性强。而Mybatis直接使用的是SQL语句，相对没那么灵活。 Mybatis的灵活性、执行效率略高于Hibernate。 三、Mybatis的优缺点 优点： SQL写在XML里，从程序代码中彻底分离，降低耦合度，便于统一管理和优化，并可重用，适合多表的复杂查询。 提供XML标签，支持编写动态SQL语句。 提供映射标签，支持对象与数据库的ORM字段关系映射。 缺点 SQL语句的编写工作量较大，尤其是字段多、关联表多时，更是如此，对开发人员编写SQL语句的功底有一定要求。 SQL语句依赖于数据库，导致数据库移植性差，不可随意更换数据库。 四、代码案例1、编写Mybatis核心配置文件【 mybatis-core.xml 】12345678910111213141516171819&lt;configuration&gt; &lt;typeAliases&gt; &lt;typeAlias type="com.fan.entity.StudentEntity" alias="StudentEntity"/&gt; &lt;/typeAliases&gt; &lt;environments default="development"&gt; &lt;environment id="development"&gt; &lt;transactionManager type="JDBC"/&gt; &lt;dataSource type="POOLED"&gt; &lt;property name="driver" value="com.mysql.jdbc.Driver"/&gt; &lt;property name="url" value="jdbc:mysql://127.0.0.1:3306/public"/&gt; &lt;property name="username" value="root"/&gt; &lt;property name="password" value="root"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;mappers&gt; &lt;mapper resource="xxxMapper.xml"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 释意: typeAlias用于存放实体类别名的集合 — typeAlias中的type代表实体类 — alias我们自定义的别名 environments环境 default里面的值可以是生产环境、测试环境、开发环境… transactionManager事务管理 type默认为JDBC dataSource是数据库连接的基本信息 mapper中的resource代表应用实体类的Mapper的路径，里面的参数可以是resource=”xxxMapper.xml”或者url=”file:///C:/xxxMapper.xml” 2、编写实体类映射文件【 xxxMapper.xml 】123456789101112131415161718192021&lt;mapper namespace="StuMapper"&gt; &lt;select id="selCount" resultType="int"&gt; select count(*) from student &lt;/select&gt; &lt;select id="selById" parameterType="int" resultType="StudentEntity"&gt; SELECT * FROM student WHERE student.stuId = #&#123;id&#125; &lt;/select&gt; &lt;insert id="addOne" parameterType="StudentEntity"&gt; INSERT INTO student VALUES(NULL,#&#123;stuName&#125;,#&#123;gender&#125;,#&#123;age&#125;,#&#123;address&#125;,NULL) &lt;/insert&gt; &lt;delete id="delOne" parameterType="int"&gt; DELETE FROM student WHERE student.stuId = #&#123;id&#125; &lt;/delete&gt; &lt;update id="modifyOne" parameterType="StudentEntity"&gt; UPDATE student SET stuName = #&#123;stuName&#125; WHERE stuId = #&#123;stuId&#125; &lt;/update&gt;&lt;/mapper&gt; 释意: mapper中的namespace是独立唯一的 映射文件中支持写原生的SQL语句 id可以形象的理解为方法名，但是同时也是独立唯一的 parameterType代表调用时传过来的参数类型 resultType代表返回值类型 #{xxx} 可以理解为占位符 3、简单的使用123456789101112131415161718192021222324252627282930313233public class Main &#123; public static void main(String[] args) &#123; Reader reader = null; SqlSessionFactoryBuilder builder = null; SqlSessionFactory factory = null; SqlSession session = null; try &#123; //1.加载配置文件 reader = Resources.getResourceAsReader("mybatis-core.xml"); //2.得到工厂的创建对象 builder = new SqlSessionFactoryBuilder(); //3.得到工厂对象 factory = builder.build(reader); //4.得到session session = factory.openSession(); //5.执行语句 StudentEntity student = session.selectOne("StuMapper.selById", 100); //StuMapper--&gt; StudentMapper.xml中的namespace。 selById--&gt; 为其中的id 。 100--&gt; 实参 System.out.println("学生名为--&gt;" + student.getStuName()); session.commit(); //修改、新增语句记得提交事务 &#125; catch (Exception e) &#123; session.rollback(); e.printStackTrace(); &#125; finally &#123; if (session != null) &#123; session.close(); &#125; &#125; &#125;&#125; END🙈]]></content>
      <tags>
        <tag>原创</tag>
        <tag>后端</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
</search>
